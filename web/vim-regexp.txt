magic 设定：
	vim是一个编辑器，不可能将正则表达式中包含的大量元字符原封不动的引用。eg /foo(1)命令。
	因此，vim规定，正则表达式的元字符必须使用反斜杠进行转义。但是这种方法比较麻烦，无法统一。
	为了解决这个问题，vim设置了magic。magic就是设置哪些元字符要加反斜杠，哪些不需要加的.
		* magic(\m): 除了$ . * ^ 之外其他元字符都要加反斜杠
		* nomaiic(\M):除了 $ ^ 之外其他元字符都要加反斜杠。
	这个设置也可以在正则表达式中通过\m \M 开关临时切换。\m 后面的正则表达式会按照magic 处理，
	\M后面的正则表达式按照nomagic 处理。
	eg：
		 :/\m.* #查找任意字符串
		 :/\M.* #查找字符串.*
	另外还有强大的\v 和 \V。
		*\v #任何元字符都不用加反斜杠
		*\V #任何元字符都必须加反斜杠
	eg:
		/\v(a.c){3}$ #查找行尾的abcaccadc
		/\m(a.c){3}$ #查找行尾的(abc){3} ,注意 . 匹配了
		/\M(a.c){3}$ #查找行尾的(a.c){3} ,注意这整体是一个字符串
		/\V(a.c){3}$ #查找任意位置的(a.c){3}$ ,注意这是整体是一个字符串
	*** 默认设置是magic。 有特殊需要时，直接通过\v \m \M \V 即可。
	vim 与 perl 相比：
	vim		perl	意义
	------------------------------
	*		*		0个或多个(匹配优先）
	\+		\+		1个或多个(匹配优先
	\{n,m}	{n,m}	n个到m个
	\{n,}	{n,}	最少n个
	\{,m}	{,m}	最多m个
	\{n}	{n}		恰好n个
	
	环视和固化组
	vim		Perl	意义
	------------------------------
	\@=		(?=		顺序环视
	\@ !	(?!		顺序否定环视
	\@ <=	(?<=	逆序否定
	\@		(?		逆序否定环视
	\@ >	(?>		固化分组
	\%(atom\)
			(?:		非捕获括号
	与perl不同的是，vim中的环视和固化分组的模式的位置与perl不同。例如，查找紧跟在foo之后的bar
	perl将模式写在环视的括号内：
		/(?<=foo)bar/
	vim 将模式写在环视的元字符之前：
		/\(foo\)\@<=bar
